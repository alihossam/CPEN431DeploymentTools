import sys
import argparse
import os
import subprocess
from pssh.clients import ParallelSSHClient
from pssh.utils import load_private_key
from pssh.utils import enable_host_logger

import utils
import fileUpload

DEFAULT_PROC_NAME = '431server'
DEFAULT_JAR_PATH = '~/server/server.jar'
DEFAULT_PORT = '1337'

SERVER_CONFIG_DIR = utils.get_project_path('server_config')

def run_cmds(args):
    server = args.server.strip()
    client = ParallelSSHClient([server], user='ubc_cpen431_5', pkey=args.key, allow_agent=False)
    output = client.run_command('rm -rf ~/server_config')
    utils.print_pssh_output(output)
    output = client.run_command('mkdir ~/server_config')
    utils.print_pssh_output(output)
    for f in os.listdir(SERVER_CONFIG_DIR):
        dest_path = f"~/server_config/{f.split('/')[-1]}"
        local_path = os.path.join(SERVER_CONFIG_DIR, f)
        fileUpload.upload_file_no_pssh([server], args.key, local_path, dest_path)
        print(f'Wrote file {local_path} to {server}')
    output = client.run_command('bash ~/server_config/setup_new_server.sh')
    utils.print_pssh_output(output)

    with open(utils.get_project_path('all_servers.txt')) as f:
        hostnames = {host.strip() for host in f.readlines()}
        hostnames.add(server)
        hostnames = sorted(hostnames)

    with open(utils.get_project_path('all_servers.txt'), 'w') as f:
        f.write('\n'.join(hostnames) + '\n')

    print(f"Added {server} to the fleet. Don't forget to commit autogenerated changes to all_servers.txt.")


def stop_all(client):
	# TODO add checks to see if command failed by parsing output
	output = client.run_command(f'pkill -f {DEFAULT_PROC_NAME}')
	print(output)


def start(client):
	# TODO add checks to see if command failed by parsing output
	output = client.run_command(f'exec -a {DEFAULT_PROC_NAME} java -Xmx64m -jar {DEFAULT_JAR_PATH} {DEFAULT_PORT} &')
	print(output)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Start/Stop server in multiple nodes.')
    parser.add_argument('server', type=str, help='server hostname')
    parser.add_argument('key', type=str, help='path of your planet lab ssh key, make sure your key is not password encrypted')
    args = parser.parse_args()
    enable_host_logger()
    run_cmds(args)
